// ===============================
// Proyecto 2 (ISIS1106 - Lenguajes y Máquinas)
// Realizado por:
// Carol Florido - 202111430
// Nicolás Rincón - 202021963
//
// Basado en el trabajo original de Silvia Takahashi
// ===============================

// Finite State Transducer that implements a Coder
// Input: Strings of the form ⍸_1!⍸_2!⍸_3!‥.!⍸_{2n-1}!⍸_{2n}# where ⍸_i∈('a'‥.'d')* of length 3, ∀i:0≤i≤2n
//  		 and the three characters that compose any ⍸_i are not necessarily distinct.

// Output: Strings of the form ρ_1!ρ_2!ρ_3!‥.!ρ_{2n-1}!ρ_{2n}# where ρ_i=⍸_i if i is odd, ρ_i=⍸_i if i is even
//		   and ρ_i≠⍸_{i-1}, and ρ_i="*" if i is even and ρ_i=⍸_{i-1}.
// ===============================

using gold.**

var Alph // Global variable
var Alfabeto
procedure main(args:String[]) begin
	// Reads the given alphabet or uses a cat basic alphabet for default
	if args.length=0 then 
		Alfabeto := {'a','c','t'}
	else
		Alfabeto := {args[0].charAt(i) | 0≤i<args[0].length()}\{'!','#'}
    end
	// Create a Transducer object over the alphabet given in the input
	coder:=createTransducer(Alfabeto)
	print "Input strings of the form w_1!w_2!...!w_2n-1!w_2n# with w_i over " + Alph
	// Utilities by default in Gold:
	Utilities.test(coder)
end

// Function that creates a transducer over a given alphabet
function createTransducer(A):ITransducer begin
	// Given the alphabet with letters spanning from 'a' to 'd', A:=('a'‥'d')
	M0 := {true,false} 				// Condition that tests whether we are in an even ⍸_i or not
	M1 := {""+p|p∈A}					// Represents the reading of the first character in an ⍸
	M2 := {""+p+q|p∈A,q∈A}			// Represents the reading of the first two characters in an ⍸
	M3 := {""+p+q+r|p∈A,q∈A,r∈A}	// Represents the reading of the three characters in an ⍸
	Ls := ({λ}×{false}×M1)∪({λ}×{false}×M2)∪({λ}×{false}×M3)	// Initial different states (⍸_1)
	
	
	Alph := A // This line is for the Main to work properly for any input alphabet
	
	
	// States are created in the following way:
	// In general (p1p2p3, T/F, c1c2c3) where p_i are the characters of the previous ⍸, that is ⍸_{i-1},
	// c_i are the characters of the current ⍸, that is ⍸_i, and T/F whether i is even or not
	// Exceptions are states associated with ⍸_1 where there are no previous ⍸ to take into account
	// The states also include a Starting State (I) Final State (F) and an Error State (err)
	Q := Ls∪(M3×{true,false}×{λ})∪(M3×{true,false}×M1)∪(M3×{true,false}×M2)
			∪(M3×{true,false}×M3)∪{"err","F","I"}
			
	// The input alphabet is A union with separators ("#" and "!")
	Σ := A ∪ {'#','!'}
	// The output alphabet is the input alphabet union with special replacement "*"
	O := Σ ∪ {'*'}
	// The initial state is the one marked as "I"
	q₀ := "I"
	// The final state is the one marked as "F"
	F := {"F"} 
	
	// The transducer is constructed as a 6-tuple with transition function g and output function h
	return GDeterministicTransducer(Q,Σ,O,q₀,F,δ,g,h)
end

// We are designing a Mealy Automaton, so the State Printing Function is null
g(x):= λ

// Transition Function that receives a state and a next-to-read character
function δ(q,σ) begin
	var c: String
	c := ""
	
	// The initial states move depending on which character is read
	if q = "I" ∧ σ∈Alph 
		then c := c+σ return ⟨λ,false,c⟩
	// If the state is the Final State, anything after it will turn it into an Error
	elseif q = "F" ∧ σ≠λ
		then return "err"
	// If the state is the Error State, it will always remain in said state
	elseif q = "err"
		then return "err"
	// In any other case, it has to be an error
	else
		return "err"
	end
end

function δ(⟨p,even,c⟩,σ) begin
	var new_p: String
	var new_c: String
	new_p := ""
	new_c := ""
	
	// States in ⍸_1 always have even=false and concatenate as long as there are not three characters in c
	if p=λ ∧ even=false ∧ c.length()≠3 ∧ σ∈Alph 
		then new_c := c+σ return ⟨p,false,new_c⟩
	
	// States that have read a full ⍸ move to specific states in which currents become previous
	// If we read a ! then we change from odd to even or even to odd
	elseif c.length()=3 ∧ σ='!' 
		then new_p:=c return ⟨new_p,!even,new_c⟩
	// States that are fully-read, even and followed by a # go to the Final State
	elseif p≠λ ∧ c.length()=3 ∧ even=true ∧ σ='#' 
		then return "F"
	
	// States in ⍸_i concatenate as long as there are not three characters in c
	elseif p≠λ ∧ c.length()≠3 ∧ σ∈Alph
		then new_c := c+σ return ⟨p,even,new_c⟩
			
	// In any other case, it has to be an error
	else
		return "err"
	end
end


// Transition output function that prints during a transition
function h(q,σ) begin
	output := ""
	var p: String
	var c: String
	var even: boolean

	// Any special state transition will never print anything
	if q = "I"
		then return λ
	elseif q = "err" 
		then return λ
	// General case of concatenating outputs
	elseif |q|=3 then
		p := q[0]
		even := q[1]
		c := q[2]
		
		// Once a fully-read state has transitioned, it should print the current under the following conditions:
		// c1c2c3 if it is odd or even and p1p2p3≠c1c2c3
		// * if it is even and p1p2p3=c1c2c3
		// In both cases, it must be followed by the symbol ! or #
		if σ='!' ∧ even = false ∧ c.length()=3
			then output:= output+c+σ return output
		elseif (σ='!' ∨ σ='#') ∧ even = true ∧ c.length()=3 then
			if p=c 
				then output:= output+"*"+σ return output
			else
				output:= output+c+σ return output
			end
		// In any other case, do not concatenate anything to the output
		else
			return λ
		end
	
	// When it reaches the Final State, it should print everything
	elseif q = "F" 
		then return λ
			
	// Any other case, it is an error
	else
		print " -> Cannot encode the string. Error Found!!"
	end
end
 