// ===============================
// Proyecto 2 (ISIS1106 - Lenguajes y Máquinas)
// Realizado por:
// Carol Florido - 202111430
// Nicolás Rincón - 202021963
//
// Basado en el trabajo original de Silvia Takahashi
// ===============================

// Finite State Transducer that implements a Decoder
// Input: Strings of the form ρ_1!ρ_2!ρ_3!‥.!ρ_{2n-1}!ρ_{2n}# where ρ_i∈('a'‥.'d')* of length 3 or ρ_i="*" 
//		   and ρ_i="" can only happen if i is even. If an even ρ_i≠"", that means ρ_i≠ρ_{i-1}.

// Input: Strings of the form ⍸_1!⍸_2!⍸_3!‥.!⍸_{2n-1}!⍸_{2n}# where ⍸_i∈('a'‥.'d')* of length 3, ∀i:0≤i≤2n,
//  		the three characters that compose any ⍸_i are not necessarily distinct, and ρ_i="*"⇒⍸_i=⍸_{i-1}.
// ===============================

using gold.**

var  Alph 

procedure main(args:String[]) begin
 	    
 	  
  
	if  args.length=0  then  Alph:= { 'a','b','c','d'}
	else	
		Alph := {args[0].charAt(i) |  0 ≤ i < args[0].length()}\{'$','#'}
    end
	
	

	deCoder := createTransducer(Alph)
	print "Input strings of the form xyz:W#. with x, y, over "+Alph +"and W  over   "+ Alph+"* (end with an empty string)"
			
	
	Utilities.test(deCoder)
end



function cutString(reading:String) begin
	characters:char[] := reading.toCharArray()
	len:Integer := 0
	out:String := ""
	
	while len < 3 do
		out := out+Character.toString((characters[len]))
		len := len+1
	end
	return out
end

 

function createTransducer(A):ITransducer begin
	States := {"Start","Final", "Error"} ∪ {⟨position, firstSet, secondSet⟩ | position in {0,1}, firstSet in  
	{""+p+q+r+"!"|p∈A,q∈A,r∈A} ∪ {"Asterisk","Asterisk!", Ø}, secondSet in {""+p|p∈A} ∪ {""+p+q|p∈A,q∈A} ∪ 
	{""+p+q+r|p∈A,q∈A,r∈A} ∪ {""+p+q+r+"!"|p∈A,q∈A,r∈A} ∪ {"Asterisk","Asterisk!"}}
	
	InAlphabet := {'a','b','c','d','!','#','*'}
	OutAlphabet := {'a','b','c','d','!','#'}
	initState := "Start"
	finalStates := {"Final"}
	
	return GDeterministicTransducer(States,InAlphabet,OutAlphabet,initState,finalStates,δ1, h1,g)
end


function δ1(q,σ) begin
	A := {'a','b','c','d'}
	if q = "Start" and σ ∈ A then
		return ⟨1, Ø ,Character.toString(σ)⟩
	elseif q = "Start" and Character.toString(σ)= "#" then
		return "Final"
	else 
		return "Error"
	end
	
end

function δ1(⟨position, firstSet, secondSet⟩, reading) begin
	A := {'a','b','c','d'}
	
	if |secondSet| = 1 and reading ∈ A then
		return ⟨position, firstSet, secondSet+reading⟩
		
		
	elseif |secondSet| = 2 and reading ∈ A then
		return ⟨position, firstSet, secondSet+reading⟩
		
	elseif |secondSet| = 3 and reading = '!' then
		
		if  position =0 and firstSet=secondSet+reading then
			return "Error"
		else
			return ⟨position, firstSet,secondSet+reading⟩
		end 

	elseif |secondSet| = 3 and reading = '#' and position≠1 then
		if  position =0 and firstSet=secondSet+"!" then
			return "Error"
		else
			return "Final"
		end 

	elseif |secondSet| = 4 and reading ∈ A then
		return ⟨(position+1)%2, secondSet,Character.toString(reading)⟩
	elseif |secondSet| = 4 and reading = '*' and position≠0 then
		return ⟨(position+1)%2, secondSet,"Asterisk"⟩
	elseif secondSet = "Asterisk" and reading = '!'  then
		return ⟨position, firstSet,"Asterisk!"⟩
	elseif secondSet = "Asterisk" and reading = '#' and position≠1 then
		return "Final"
	elseif secondSet = "Asterisk!" and reading ∈ A then
		return ⟨(position+1)%2, secondSet,Character.toString(reading)⟩
	else
		return "Error"
	end
end
	

function h1 (state) begin
	return λ
end

function h1 (⟨position, firstSet, secondSet⟩) begin
	return λ
end

function g (state, reading) begin
	if state = "Start" and Character.toString(reading)= "#" then
		return reading
	else
		return λ
	end
end

function g (⟨position, firstSet, secondSet⟩, reading) begin
	A := {'a','b','c','d'}
	if |secondSet| = 2 and reading ∈ A then
		return secondSet+reading
	elseif |secondSet| = 3 and reading = '!' then
		return reading
	elseif |secondSet| = 3 and reading = '#' then
		return reading
	elseif |secondSet| = 4 and reading = '*' then
		 return cutString(secondSet)
	elseif secondSet = "Asterisk" and reading = '!'  then
		return reading
	elseif secondSet = "Asterisk" and reading = '#'  then
		return reading
	else
		return λ
	end
end